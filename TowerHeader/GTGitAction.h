//
//     Generated by class-dump 3.5 (64 bit) (Debug version compiled Sep 17 2017 16:24:48).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2015 by Steve Nygard.
//

#import "GTAction.h"

@class GTGitBranchManager, GTGitFlowManager, GTGitHistoryManager, GTGitIgnoresManager, GTGitLFSManager, GTGitRefManager, GTGitRemoteManager, GTGitRepository, GTGitRepositoryManager, GTGitRepositoryQueue, GTGitStashManager, GTGitSubmoduleManager, GTGitTagManager, GTGitWorkingTreeManager, GTUndoAction, NSManagedObjectContext;

@interface GTGitAction : GTAction
{
    BOOL _needsReloadRepositoryInfo;
    BOOL _needsReloadBranches;
    BOOL _needsReloadTags;
    BOOL _needsReloadRemotes;
    BOOL _needsReloadSubmodules;
    BOOL _needsReloadStashes;
    BOOL _needsReloadWorkingTreeStatus;
    BOOL _needsLockUndo;
    GTGitRepository *_repository;
    GTGitRepositoryQueue *_queueManager;
    GTUndoAction *_undoAction;
    NSManagedObjectContext *_context;
    GTGitRepositoryManager *_repositoryManager;
    GTGitBranchManager *_branchManager;
    GTGitTagManager *_tagManager;
    GTGitRemoteManager *_remoteManager;
    GTGitSubmoduleManager *_submoduleManager;
    GTGitStashManager *_stashManager;
    GTGitWorkingTreeManager *_workingTreeManager;
    GTGitHistoryManager *_historyManager;
    GTGitIgnoresManager *_ignoresManager;
    GTGitIgnoresManager *_excludesManager;
    GTGitFlowManager *_gitFlowManager;
    GTGitLFSManager *_gitLFSManager;
    GTGitRefManager *_gitRefManager;
    CDUnknownBlockType _completionHandler;
}

+ (id)actionWithRepository:(id)arg1;
- (void).cxx_destruct;
@property(copy, nonatomic) CDUnknownBlockType completionHandler; // @synthesize completionHandler=_completionHandler;
@property(retain, nonatomic) GTGitRefManager *gitRefManager; // @synthesize gitRefManager=_gitRefManager;
@property(retain, nonatomic) GTGitLFSManager *gitLFSManager; // @synthesize gitLFSManager=_gitLFSManager;
@property(retain, nonatomic) GTGitFlowManager *gitFlowManager; // @synthesize gitFlowManager=_gitFlowManager;
@property(retain, nonatomic) GTGitIgnoresManager *excludesManager; // @synthesize excludesManager=_excludesManager;
@property(retain, nonatomic) GTGitIgnoresManager *ignoresManager; // @synthesize ignoresManager=_ignoresManager;
@property(retain, nonatomic) GTGitHistoryManager *historyManager; // @synthesize historyManager=_historyManager;
@property(retain, nonatomic) GTGitWorkingTreeManager *workingTreeManager; // @synthesize workingTreeManager=_workingTreeManager;
@property(retain, nonatomic) GTGitStashManager *stashManager; // @synthesize stashManager=_stashManager;
@property(retain, nonatomic) GTGitSubmoduleManager *submoduleManager; // @synthesize submoduleManager=_submoduleManager;
@property(retain, nonatomic) GTGitRemoteManager *remoteManager; // @synthesize remoteManager=_remoteManager;
@property(retain, nonatomic) GTGitTagManager *tagManager; // @synthesize tagManager=_tagManager;
@property(retain, nonatomic) GTGitBranchManager *branchManager; // @synthesize branchManager=_branchManager;
@property(retain, nonatomic) GTGitRepositoryManager *repositoryManager; // @synthesize repositoryManager=_repositoryManager;
@property(retain, nonatomic) NSManagedObjectContext *context; // @synthesize context=_context;
@property(retain, nonatomic) GTUndoAction *undoAction; // @synthesize undoAction=_undoAction;
@property(readonly, nonatomic) BOOL needsLockUndo; // @synthesize needsLockUndo=_needsLockUndo;
@property(nonatomic) BOOL needsReloadWorkingTreeStatus; // @synthesize needsReloadWorkingTreeStatus=_needsReloadWorkingTreeStatus;
@property(nonatomic) BOOL needsReloadStashes; // @synthesize needsReloadStashes=_needsReloadStashes;
@property(nonatomic) BOOL needsReloadSubmodules; // @synthesize needsReloadSubmodules=_needsReloadSubmodules;
@property(nonatomic) BOOL needsReloadRemotes; // @synthesize needsReloadRemotes=_needsReloadRemotes;
@property(nonatomic) BOOL needsReloadTags; // @synthesize needsReloadTags=_needsReloadTags;
@property(nonatomic) BOOL needsReloadBranches; // @synthesize needsReloadBranches=_needsReloadBranches;
@property(nonatomic) BOOL needsReloadRepositoryInfo; // @synthesize needsReloadRepositoryInfo=_needsReloadRepositoryInfo;
@property(retain, nonatomic) GTGitRepositoryQueue *queueManager; // @synthesize queueManager=_queueManager;
@property(retain, nonatomic) GTGitRepository *repository; // @synthesize repository=_repository;
- (void)postNotificationWithName:(id)arg1 userInfo:(id)arg2;
- (void)deliverUserNotificationWithTitle:(id)arg1 subtitle:(id)arg2 informativeText:(id)arg3;
- (void)deliverUserNotificationWithTitle:(id)arg1 subtitle:(id)arg2;
- (id)initWithRepository:(id)arg1;
- (id)init;

@end

